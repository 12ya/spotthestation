diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraDeviceDetails.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraDeviceDetails.kt
index 015f3c0..6912285 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraDeviceDetails.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/core/CameraDeviceDetails.kt
@@ -131,7 +131,7 @@ class CameraDeviceDetails(private val cameraManager: CameraManager, private val
     return deviceTypes
   }
 
-  private fun getFieldOfView(): Double = 2 * atan(sensorSize.bigger / (focalLengths[0] * 2)) * (180 / PI)
+  private fun getFieldOfView(): Double = 2 * atan(sensorSize.height / (focalLengths[0] * 2)) * (180 / PI)
 
   private fun getVideoSizes(): List<Size> = characteristics.getVideoSizes(cameraId, videoFormat)
   private fun getPhotoSizes(): List<Size> = characteristics.getPhotoSizes(ImageFormat.JPEG)
diff --git a/node_modules/react-native-vision-camera/ios/CameraView+Orientation.swift b/node_modules/react-native-vision-camera/ios/CameraView+Orientation.swift
index 1eb0f9b..c274935 100644
--- a/node_modules/react-native-vision-camera/ios/CameraView+Orientation.swift
+++ b/node_modules/react-native-vision-camera/ios/CameraView+Orientation.swift
@@ -10,36 +10,60 @@ import Foundation
 import UIKit
 
 extension CameraView {
+        private var windowInterfaceOrientation: UIInterfaceOrientation {
+            var orientation: UIInterfaceOrientation = .portrait
+            if #available(iOS 13.0, *) {
+            orientation = UIApplication.shared.windows.first?.windowScene?.interfaceOrientation ?? .portrait
+            } else {
+                orientation = UIApplication.shared.statusBarOrientation
+            }
+
+            return orientation
+        }
+
   /// Orientation of the input connection (preview)
-  private var inputOrientation: UIInterfaceOrientation {
-    return .portrait
-  }
+    private var inputOrientation: UIInterfaceOrientation {
+            return windowInterfaceOrientation
+        }
     
-  // Orientation of the output connections (photo, video, frame processor)
-  var outputOrientation: UIInterfaceOrientation {
-    if let userOrientation = orientation as String?,
-       let parsedOrientation = try? UIInterfaceOrientation(withString: userOrientation) {
-      // user is overriding output orientation
-      return parsedOrientation
-    } else {
-      // use same as input orientation
-      return inputOrientation
+       // Orientation of the output connections (photo, video, frame processor)
+    public var outputOrientation: UIInterfaceOrientation {
+        if let userOrientation = orientation as String?,
+           let parsedOrientation = try? UIInterfaceOrientation(withString: userOrientation) {
+            // user is overriding output orientation
+            return parsedOrientation
+        } else {
+            // use same as input orientation
+            return inputOrientation
+        }
     }
+    
+  // Call this method to start observing device orientation changes
+  internal func startObservingDeviceOrientation() {
+      NotificationCenter.default.addObserver(self, selector: #selector(deviceOrientationDidChange), name: UIDevice.orientationDidChangeNotification, object: nil)
+      updateOrientation()
+  }
+    
+  @objc private func deviceOrientationDidChange(_ notification: Notification) {
+      updateOrientation()
   }
 
   func updateOrientation() {
     // Updates the Orientation for all rotable
     let isMirrored = videoDeviceInput?.device.position == .front
+      DispatchQueue.main.async {
+          self.previewView.videoPreviewLayer.connection?.setInterfaceOrientation(self.outputOrientation)
           
-    let connectionOrientation = outputOrientation
-    captureSession.outputs.forEach { output in
-      output.connections.forEach { connection in
-        if connection.isVideoMirroringSupported {
-          connection.automaticallyAdjustsVideoMirroring = false
-          connection.isVideoMirrored = isMirrored
-        }
-        connection.setInterfaceOrientation(connectionOrientation)
+          let connectionOrientation = self.outputOrientation
+          self.captureSession.outputs.forEach { output in
+              output.connections.forEach { connection in
+                  if connection.isVideoMirroringSupported {
+                      connection.automaticallyAdjustsVideoMirroring = false
+                      connection.isVideoMirrored = isMirrored
+                  }
+                  connection.setInterfaceOrientation(connectionOrientation)
+              }
+          }
       }
-    }
   }
 }
diff --git a/node_modules/react-native-vision-camera/ios/CameraView.swift b/node_modules/react-native-vision-camera/ios/CameraView.swift
index 08f3552..78cf31d 100644
--- a/node_modules/react-native-vision-camera/ios/CameraView.swift
+++ b/node_modules/react-native-vision-camera/ios/CameraView.swift
@@ -131,6 +131,7 @@ public final class CameraView: UIView {
                                            selector: #selector(audioSessionInterrupted),
                                            name: AVAudioSession.interruptionNotification,
                                            object: AVAudioSession.sharedInstance)
+      self.startObservingDeviceOrientation()
   }
 
   @available(*, unavailable)
