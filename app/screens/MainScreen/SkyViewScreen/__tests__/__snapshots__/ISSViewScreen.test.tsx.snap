// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <View
    style={
      [
        {
          "left": 26,
          "position": "absolute",
          "zIndex": 9,
        },
        {
          "top": 35,
        },
      ]
    }
  >
    <View
      accessibilityHint="disable full screen mode"
      accessibilityLabel="x button"
      accessibilityRole="imagebutton"
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View
        animatedStyle={
          {
            "value": {},
          }
        }
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "rgba(255, 255, 255, 0.2)",
            "borderRadius": 143,
            "display": "flex",
            "height": 63,
            "justifyContent": "center",
            "marginTop": 0,
            "overflow": "hidden",
            "position": "relative",
            "width": 63,
          }
        }
      >
        <View
          style={
            [
              {
                "backgroundColor": "transparent",
              },
              [
                {
                  "alignItems": "center",
                  "backgroundColor": "#1E2022",
                  "borderRadius": 143,
                  "display": "flex",
                  "height": 60,
                  "justifyContent": "center",
                  "overflow": "hidden",
                  "position": "relative",
                  "width": 60,
                },
                undefined,
              ],
            ]
          }
        >
          <ViewManagerAdapter_ExpoBlurView
            proxiedProperties={
              {
                "intensity": 0,
                "tint": "default",
              }
            }
            style={
              {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
          />
          <View>
            <RCTImageView
              accessibilityState={
                {
                  "busy": undefined,
                  "checked": undefined,
                  "disabled": undefined,
                  "expanded": undefined,
                  "selected": undefined,
                }
              }
              internal_analyticTag={null}
              resizeMode="contain"
              source={
                [
                  {
                    "height": undefined,
                    "uri": undefined,
                    "width": undefined,
                  },
                ]
              }
              style={
                {
                  "height": 29,
                  "overflow": "hidden",
                  "resizeMode": "contain",
                  "tintColor": "#FFFFFF",
                  "width": 29,
                }
              }
              tintColor="#FFFFFF"
            />
          </View>
        </View>
      </View>
    </View>
  </View>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      [
        {
          "backgroundColor": "rgba(0, 0, 0, 1)",
          "borderRadius": 17,
          "flex": 1,
          "overflow": "hidden",
          "position": "relative",
        },
        {
          "marginTop": 0,
        },
      ]
    }
  >
    <Text
      allowFontScaling={false}
      style={
        [
          {},
          [
            {
              "fontSize": 23,
              "lineHeight": 35,
            },
            {
              "fontFamily": "Helvetica Neue",
            },
            {
              "color": "#191015",
            },
          ],
          undefined,
          undefined,
          [
            {
              "color": "#FFFFFF",
              "fontFamily": "Helvetica Neue",
              "fontSize": 35,
              "lineHeight": 56,
              "textAlign": "center",
            },
            {
              "borderColor": "#0B3D91",
              "borderRadius": 10,
              "borderWidth": 1,
              "padding": 5,
              "textDecorationLine": "underline",
            },
          ],
        ]
      }
    >
      issView.cameraPermissionText undefined
    </Text>
  </View>
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={true}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection="down"
    swipeThreshold={100}
    transparent={true}
    useNativeDriverForBackdrop={true}
    visible={false}
  />
</div>
`;
